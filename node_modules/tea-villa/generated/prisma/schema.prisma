generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id           String               @id @default(uuid())
  email        String               @unique
  firstName    String
  lastName     String
  phone        String               @unique
  password     String
  profileImage String?
  addresses    Address[]
  dateOfBirth  String?
  gender       String?
  otp          String?
  otpExpiresAt DateTime?
  token        UserToken[]
  cart         Cart?
  wishlists    WishList[]
  role         Role                 @default(USER)
  coupounUsage CouponUsage[]
  ratings      Rating[]
  order        Order[]
  resetToken   PasswordResetToken[]
  notification Notification[]
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  userId    String   @unique
  otp       String
  expiresAt DateTime
  used      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Address {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  pincode   Int?
  city      String?
  state     String?
  country   String?
  street    String?
  landmark  String?
  isDefault Boolean  @default(false)
  latitude  Float?
  longitude Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ContactUs {
  id      String @id @default(uuid())
  phone   String
  email   String
  message String
}

model HomePageContent {
  id         String      @id @default(uuid())
  image      String
  heading    String
  paragraphs Paragraph[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Paragraph {
  id        String          @id @default(uuid())
  text      String
  content   HomePageContent @relation(fields: [contentId], references: [id])
  contentId String
}

model Blog {
  id         String          @id @default(uuid())
  heading    String
  image      String
  paragraphs BlogParagraph[]
}

model BlogParagraph {
  id     String @id @default(uuid())
  text   String
  blogId String
  blog   Blog   @relation(fields: [blogId], references: [id], onDelete: Cascade)
}

model WishList {
  id        String  @id @default(uuid())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id         String     @id @default(uuid())
  image      String
  name       String
  collection String
  flavour    String
  origin     String
  qualities  String[]
  caffeine   String
  allegens   String[]
  isOrganic  Boolean
  isVegan    Boolean
  variants   Variant[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  wishlists  WishList[]
  coupons    Coupon[]   @relation("CouponProducts")
  ratings    Rating[]
}

model Variant {
  id        String      @id @default(uuid())
  size      String
  price     Float
  product   Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  CartItem  CartItem[]
  coupons   Coupon[]    @relation("CouponVariants")
  orderItem OrderItem[]
}

enum DiscountType {
  percentage
  fixed
}

model Coupon {
  id            String       @id @default(uuid())
  code          String       @unique
  discount      Int
  type          DiscountType
  minimumAmount Float?
  appliesToAll  Boolean      @default(false)
  size          String?
  expiresAt     DateTime
  isActive      Boolean      @default(true)
  createdAt     DateTime     @default(now())

  // Relations
  products     Product[]     @relation("CouponProducts")
  variants     Variant[]     @relation("CouponVariants")
  coupounUsage CouponUsage[]
}

model CouponUsage {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  couponId    String
  coupon      Coupon   @relation(fields: [couponId], references: [id])
  cartAmount  Float
  discount    Float
  finalAmount Float
  createdAt   DateTime @default(now())
}

model Cart {
  id        String     @id @default(uuid())
  userId    String?    @unique
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String  @id @default(uuid())
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String
  variant   Variant @relation(fields: [variantId], references: [id])
  variantId String
  quantity  Int
}

model Payment {
  id                String   @id @default(cuid())
  razorpayOrderId   String   @unique
  razorpayPaymentId String?
  amount            Float
  currency          String
  receipt           String
  status            String
  userId            String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Rating {
  id        String   @id @default(uuid())
  userId    String
  productId String
  rating    Int
  review    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Order {
  id        String      @id @default(cuid())
  userId    String
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]
  total     Float
  status    String // pending, paid, shipped, delivered, etc.
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  paymentId String      @unique
}

model OrderItem {
  id        String   @id @default(uuid())
  quantity  Int
  orderId   String
  variantId String
  variant   Variant  @relation(fields: [variantId], references: [id])
  order     Order    @relation(fields: [orderId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chat {
  id        String   @id @default(cuid())
  prompt    String
  imageUrl  String?
  response  String
  createdAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}
